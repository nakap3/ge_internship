// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTERDATA_DATA_H_
#define FLATBUFFERS_GENERATED_MONSTERDATA_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace Data {

struct FbMonsterData;
struct FbMonsterDataBuilder;

struct FbMonsterList;
struct FbMonsterListBuilder;

enum Hand : int8_t {
  Hand_stone = 0,
  Hand_paper = 1,
  Hand_scissors = 2,
  Hand_MIN = Hand_stone,
  Hand_MAX = Hand_scissors
};

inline const Hand (&EnumValuesHand())[3] {
  static const Hand values[] = {
    Hand_stone,
    Hand_paper,
    Hand_scissors
  };
  return values;
}

inline const char * const *EnumNamesHand() {
  static const char * const names[4] = {
    "stone",
    "paper",
    "scissors",
    nullptr
  };
  return names;
}

inline const char *EnumNameHand(Hand e) {
  if (flatbuffers::IsOutRange(e, Hand_stone, Hand_scissors)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesHand()[index];
}

struct FbMonsterData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbMonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LABEL = 4,
    VT_NAME = 6,
    VT_HP = 8,
    VT_AP = 10,
    VT_DP = 12,
    VT_HAND = 14
  };
  const flatbuffers::String *label() const {
    return GetPointer<const flatbuffers::String *>(VT_LABEL);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 0);
  }
  int16_t ap() const {
    return GetField<int16_t>(VT_AP, 0);
  }
  int16_t dp() const {
    return GetField<int16_t>(VT_DP, 0);
  }
  Data::Hand hand() const {
    return static_cast<Data::Hand>(GetField<int8_t>(VT_HAND, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_HP) &&
           VerifyField<int16_t>(verifier, VT_AP) &&
           VerifyField<int16_t>(verifier, VT_DP) &&
           VerifyField<int8_t>(verifier, VT_HAND) &&
           verifier.EndTable();
  }
};

struct FbMonsterDataBuilder {
  typedef FbMonsterData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_label(flatbuffers::Offset<flatbuffers::String> label) {
    fbb_.AddOffset(FbMonsterData::VT_LABEL, label);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FbMonsterData::VT_NAME, name);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(FbMonsterData::VT_HP, hp, 0);
  }
  void add_ap(int16_t ap) {
    fbb_.AddElement<int16_t>(FbMonsterData::VT_AP, ap, 0);
  }
  void add_dp(int16_t dp) {
    fbb_.AddElement<int16_t>(FbMonsterData::VT_DP, dp, 0);
  }
  void add_hand(Data::Hand hand) {
    fbb_.AddElement<int8_t>(FbMonsterData::VT_HAND, static_cast<int8_t>(hand), 0);
  }
  explicit FbMonsterDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FbMonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbMonsterData>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbMonsterData> CreateFbMonsterData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> label = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t hp = 0,
    int16_t ap = 0,
    int16_t dp = 0,
    Data::Hand hand = Data::Hand_stone) {
  FbMonsterDataBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_label(label);
  builder_.add_dp(dp);
  builder_.add_ap(ap);
  builder_.add_hp(hp);
  builder_.add_hand(hand);
  return builder_.Finish();
}

inline flatbuffers::Offset<FbMonsterData> CreateFbMonsterDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *label = nullptr,
    const char *name = nullptr,
    int16_t hp = 0,
    int16_t ap = 0,
    int16_t dp = 0,
    Data::Hand hand = Data::Hand_stone) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Data::CreateFbMonsterData(
      _fbb,
      label__,
      name__,
      hp,
      ap,
      dp,
      hand);
}

struct FbMonsterList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbMonsterListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Data::FbMonsterData>> *monster_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Data::FbMonsterData>> *>(VT_MONSTER_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MONSTER_LIST) &&
           verifier.VerifyVector(monster_list()) &&
           verifier.VerifyVectorOfTables(monster_list()) &&
           verifier.EndTable();
  }
};

struct FbMonsterListBuilder {
  typedef FbMonsterList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_monster_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::FbMonsterData>>> monster_list) {
    fbb_.AddOffset(FbMonsterList::VT_MONSTER_LIST, monster_list);
  }
  explicit FbMonsterListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FbMonsterList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbMonsterList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbMonsterList> CreateFbMonsterList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::FbMonsterData>>> monster_list = 0) {
  FbMonsterListBuilder builder_(_fbb);
  builder_.add_monster_list(monster_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<FbMonsterList> CreateFbMonsterListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Data::FbMonsterData>> *monster_list = nullptr) {
  auto monster_list__ = monster_list ? _fbb.CreateVector<flatbuffers::Offset<Data::FbMonsterData>>(*monster_list) : 0;
  return Data::CreateFbMonsterList(
      _fbb,
      monster_list__);
}

inline const Data::FbMonsterList *GetFbMonsterList(const void *buf) {
  return flatbuffers::GetRoot<Data::FbMonsterList>(buf);
}

inline const Data::FbMonsterList *GetSizePrefixedFbMonsterList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Data::FbMonsterList>(buf);
}

inline const char *FbMonsterListIdentifier() {
  return "MDFB";
}

inline bool FbMonsterListBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FbMonsterListIdentifier());
}

inline bool VerifyFbMonsterListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Data::FbMonsterList>(FbMonsterListIdentifier());
}

inline bool VerifySizePrefixedFbMonsterListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Data::FbMonsterList>(FbMonsterListIdentifier());
}

inline const char *FbMonsterListExtension() {
  return "mdfb";
}

inline void FinishFbMonsterListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Data::FbMonsterList> root) {
  fbb.Finish(root, FbMonsterListIdentifier());
}

inline void FinishSizePrefixedFbMonsterListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Data::FbMonsterList> root) {
  fbb.FinishSizePrefixed(root, FbMonsterListIdentifier());
}

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_MONSTERDATA_DATA_H_
